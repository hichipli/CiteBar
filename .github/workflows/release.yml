name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.3.1)'
        required: true
        type: string

# Grant GITHUB_TOKEN the permissions required to make releases
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Check Swift version
      run: |
        swift --version
        echo "Xcode version:"
        xcodebuild -version
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
        # Get architecture and date for DMG naming (match Makefile format)
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          ARCH_NAME="intel"
        elif [ "$ARCH" = "arm64" ]; then
          ARCH_NAME="arm64"
        else
          ARCH_NAME="$ARCH"
        fi
        BUILD_DATE=$(date +%Y%m%d)
        DMG_NAME="CiteBar-$(echo $VERSION | sed 's/^v//')-${ARCH_NAME}-${BUILD_DATE}"
        
        echo "ARCH_NAME=$ARCH_NAME" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_OUTPUT
        
    - name: Update version in code
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        sed -i '' "s/static let current: String = \".*\"/static let current: String = \"$VERSION\"/" Sources/CiteBar/AppVersion.swift
        BUILD_NUMBER=$(date +%s)
        sed -i '' "s/static let build: String = \".*\"/static let build: String = \"$BUILD_NUMBER\"/" Sources/CiteBar/AppVersion.swift
        
    - name: Build Release
      run: |
        make build
        
    - name: Create App Bundle
      run: |
        mkdir -p CiteBar.app/Contents/MacOS
        mkdir -p CiteBar.app/Contents/Resources
        
        # Copy executable
        cp .build/release/CiteBar CiteBar.app/Contents/MacOS/
        
        # Make script executable and create Info.plist
        chmod +x scripts/create-info-plist.sh
        ./scripts/create-info-plist.sh CiteBar.app/Contents/Info.plist
        
        # Copy app icons
        if [ -f "Assets.xcassets/AppIcon.appiconset/1024.png" ]; then
          cp "Assets.xcassets/AppIcon.appiconset/1024.png" "CiteBar.app/Contents/Resources/AppIcon.png"
          echo "‚úÖ Copied 1024px icon"
        fi
        if [ -f "Assets.xcassets/AppIcon.appiconset/512.png" ]; then
          cp "Assets.xcassets/AppIcon.appiconset/512.png" "CiteBar.app/Contents/Resources/AppIcon@2x.png"
          echo "‚úÖ Copied 512px icon"
        fi
        
        # Create icns file from PNG (optional, for DMG)
        if [ -f "Assets.xcassets/AppIcon.appiconset/1024.png" ]; then
          mkdir -p AppIcon.iconset
          cp "Assets.xcassets/AppIcon.appiconset/1024.png" "AppIcon.iconset/icon_512x512@2x.png"
          cp "Assets.xcassets/AppIcon.appiconset/512.png" "AppIcon.iconset/icon_512x512.png" 2>/dev/null || cp "Assets.xcassets/AppIcon.appiconset/1024.png" "AppIcon.iconset/icon_512x512.png"
          iconutil -c icns AppIcon.iconset -o "CiteBar.app/Contents/Resources/AppIcon.icns" 2>/dev/null || echo "Could not create icns file"
          rm -rf AppIcon.iconset
        fi
        
        # Make executable
        chmod +x CiteBar.app/Contents/MacOS/CiteBar
        
    - name: Create DMG
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create DMG with proper naming format
        DMG_FILE="${{ steps.get_version.outputs.DMG_NAME }}.dmg"
        
        create-dmg \
          --volname "CiteBar ${{ steps.get_version.outputs.VERSION }}" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "CiteBar.app" 175 120 \
          --hide-extension "CiteBar.app" \
          --app-drop-link 425 120 \
          "$DMG_FILE" \
          "CiteBar.app" || true
          
        # If create-dmg fails, create simple DMG
        if [ ! -f "$DMG_FILE" ]; then
          hdiutil create -volname "CiteBar ${{ steps.get_version.outputs.VERSION }}" \
            -srcfolder CiteBar.app \
            -ov -format UDZO \
            "$DMG_FILE"
        fi
        
    - name: Generate Appcast
      run: |
        # Get file size and calculate SHA256
        DMG_FILE="${{ steps.get_version.outputs.DMG_NAME }}.dmg"
        DMG_SIZE=$(stat -f%z "$DMG_FILE")
        DMG_SHA256=$(shasum -a 256 "$DMG_FILE" | cut -d' ' -f1)
        CURRENT_DATE=$(date -u +"%a, %d %b %Y %H:%M:%S %Z")
        
        # Create appcast.xml
        cat > appcast.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
          <channel>
            <title>CiteBar</title>
            <description>Citation Tracking for Academics</description>
            <language>en</language>
            <link>https://github.com/hichipli/CiteBar</link>
            <item>
              <title>Version ${{ steps.get_version.outputs.VERSION }}</title>
              <pubDate>$CURRENT_DATE</pubDate>
              <description><![CDATA[
                <h2>What's New in CiteBar ${{ steps.get_version.outputs.VERSION }}</h2>
                <ul>
                  <li>Added automatic update functionality via Sparkle framework</li>
                  <li>Fixed citation history persistence issues on app reinstall</li>
                  <li>Improved last update time display with specific timestamps</li>
                  <li>Enhanced About page with better layout and feature highlights</li>
                  <li>Updated Scholar Metrics header to show dynamic profile count</li>
                  <li>Fixed auto-launch functionality using modern SMAppService API</li>
                </ul>
                <p>This update improves the overall reliability and user experience of CiteBar.</p>
              ]]></description>
              <enclosure url="https://github.com/hichipli/CiteBar/releases/download/${{ steps.get_version.outputs.TAG }}/${{ steps.get_version.outputs.DMG_NAME }}.dmg"
                         sparkle:version="${{ steps.get_version.outputs.VERSION }}"
                         sparkle:shortVersionString="${{ steps.get_version.outputs.VERSION }}"
                         sparkle:sha256Sum="$DMG_SHA256"
                         length="$DMG_SIZE"
                         type="application/octet-stream" />
              <sparkle:minimumSystemVersion>13.0</sparkle:minimumSystemVersion>
            </item>
          </channel>
        </rss>
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        name: CiteBar ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## What's New in CiteBar ${{ steps.get_version.outputs.VERSION }}
          
          - ‚ú® Added automatic update functionality via Sparkle framework
          - üîß Fixed citation history persistence issues on app reinstall  
          - ‚è∞ Improved last update time display with specific timestamps
          - üé® Enhanced About page with better layout and feature highlights
          - üìä Updated Scholar Metrics header to show dynamic profile count
          - üöÄ Fixed auto-launch functionality using modern SMAppService API
          
          This update improves the overall reliability and user experience of CiteBar.
          
          ## Installation
          
          1. Download the DMG file below
          2. Open the DMG and drag CiteBar to your Applications folder
          3. Launch CiteBar from Applications
          4. Configure your Google Scholar profiles in Settings
          
          ## System Requirements
          
          - macOS 13.0 or later
          - Intel or Apple Silicon Mac
        draft: false
        prerelease: false
        files: |
          ${{ steps.get_version.outputs.DMG_NAME }}.dmg
          appcast.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}