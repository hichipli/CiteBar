name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.3.1)'
        required: true
        type: string

# Grant GITHUB_TOKEN the permissions required to make releases
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-15
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Check Swift version
      run: |
        swift --version
        echo "Xcode version:"
        xcodebuild -version
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
        # Get architecture and date for DMG naming (match Makefile format)
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          ARCH_NAME="intel"
        elif [ "$ARCH" = "arm64" ]; then
          ARCH_NAME="arm64"
        else
          ARCH_NAME="$ARCH"
        fi
        BUILD_DATE=$(date +%Y%m%d)
        DMG_NAME="CiteBar-$(echo $VERSION | sed 's/^v//')-${ARCH_NAME}-${BUILD_DATE}"
        
        echo "ARCH_NAME=$ARCH_NAME" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_OUTPUT
        
    - name: Update version in code
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        sed -i '' "s/static let current: String = \".*\"/static let current: String = \"$VERSION\"/" Sources/CiteBar/AppVersion.swift
        BUILD_NUMBER=$(date +%s)
        sed -i '' "s/static let build: String = \".*\"/static let build: String = \"$BUILD_NUMBER\"/" Sources/CiteBar/AppVersion.swift
        
    - name: Build and Package
      run: |
        # Create properly configured app bundle with Sparkle framework, rpath fixes, and signing
        make package
        
    - name: Create DMG
      run: |
        # Use Makefile to create DMG (it will handle everything properly)
        make dmg
        
        # Move DMG to expected filename format
        MAKEFILE_DMG=$(ls dist/*.dmg | head -1)
        EXPECTED_DMG="${{ steps.get_version.outputs.DMG_NAME }}.dmg"
        
        if [ "$MAKEFILE_DMG" != "$EXPECTED_DMG" ]; then
          mv "$MAKEFILE_DMG" "$EXPECTED_DMG"
          echo "Renamed DMG: $MAKEFILE_DMG -> $EXPECTED_DMG"
        fi
        
    - name: Generate Appcast
      run: |
        # Get file size and calculate SHA256
        DMG_FILE="${{ steps.get_version.outputs.DMG_NAME }}.dmg"
        DMG_SIZE=$(stat -f%z "$DMG_FILE")
        DMG_SHA256=$(shasum -a 256 "$DMG_FILE" | cut -d' ' -f1)
        CURRENT_DATE=$(date -u +"%a, %d %b %Y %H:%M:%S %Z")
        
        # Generate release notes from AppVersion.swift
        RELEASE_NOTES_HTML=$(swift scripts/extract-release-notes.swift html)
        
        # Create appcast.xml
        cat > appcast.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
          <channel>
            <title>CiteBar</title>
            <description>Citation Tracking for Academics</description>
            <language>en</language>
            <link>https://github.com/hichipli/CiteBar</link>
            <item>
              <title>Version ${{ steps.get_version.outputs.VERSION }}</title>
              <pubDate>$CURRENT_DATE</pubDate>
              <description><![CDATA[
                $RELEASE_NOTES_HTML
              ]]></description>
              <enclosure url="https://github.com/hichipli/CiteBar/releases/download/${{ steps.get_version.outputs.TAG }}/${{ steps.get_version.outputs.DMG_NAME }}.dmg"
                         sparkle:version="${{ steps.get_version.outputs.VERSION }}"
                         sparkle:shortVersionString="${{ steps.get_version.outputs.VERSION }}"
                         sparkle:sha256Sum="$DMG_SHA256"
                         length="$DMG_SIZE"
                         type="application/octet-stream" />
              <sparkle:minimumSystemVersion>13.0</sparkle:minimumSystemVersion>
            </item>
          </channel>
        </rss>
        EOF
        
    - name: Create Release
      run: |
        # Generate release notes from AppVersion.swift
        RELEASE_NOTES_MARKDOWN=$(swift scripts/extract-release-notes.swift markdown)
        echo "$RELEASE_NOTES_MARKDOWN" > release-notes.md
        
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.TAG }}
        name: CiteBar ${{ steps.get_version.outputs.VERSION }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          ${{ steps.get_version.outputs.DMG_NAME }}.dmg
          appcast.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}